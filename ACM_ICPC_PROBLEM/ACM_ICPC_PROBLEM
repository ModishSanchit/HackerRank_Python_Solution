                                                              

                                                                 ACM ICPC TEAM


PROBLEM:


        There are a number of people who will be attending ACM-ICPC World Finals. Each of them may be well versed in a number of topics. Given a list of topics known by each attendee, you must determine the maximum number of topics a 2-person team can know. Also find out how many ways a team can be formed to know that many topics. Lists will be in the form of bit strings, where each string represents an attendee and each position in that string represents a field of knowledge, 1 if its a known field or 0 if not.

For example, given three attendees' data as follows:					
							
							10101
							11110
							00010



		These are all possible teams that can be formed:

		Members Subjects
		(1,2)   [1,2,3,4,5]
		(1,3)   [1,3,4,5]
		(2,3)   [1,2,3,4]


Function Description

Complete the acmTeam function in the editor below. It should return an integer array with two elements: the maximum number of topics any team can know and the number of teams that can be formed that know that maximum number of topics.

acmTeam has the following parameter(s):

    topic: a string of binary digits

Input Format

The first line contains two space-separated integers
and , where represents the number of attendees and

represents the number of topics.

Each of the next
lines contains a binary string of length . If the th line's th character is , then the th person knows the

th topic.



SOLUTION:


import itertools
N,M = map(int,input().strip().split())
knowledge=[]
for i in range(N):
    knowledge.append(int(input(),2))
mx = -float('inf')
teams=0
for p1,p2 in itertools.combinations(range(N),2):
    combined_topics = bin(knowledge[p1]|knowledge[p2]).count('1')
    if (combined_topics==mx):
        teams+=1
    elif (combined_topics>mx):
        mx = combined_topics
        teams=1

print(mx,teams,sep='\n')
